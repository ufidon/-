// 测算式
// 跑： 进入此文文件夹
// go test -v
// （幂（利率率+1，年）+1）*本金
// 正弦（角）/角
// 平方根（面积/π）

package ss

import (
	"fmt"
	"math"
	"testing"
)

func TestS算式(测 *testing.T) {
	测试集 := []struct {
		式 string
		境 S境
		果 string
	}{
		{"(幂(利率+1,年)+1)*本金", S境{"利率": 0.01, "年": 5, "本金": 1000}, "2051.0100500999997"},
		{"正弦(角)/角", S境{"角": math.Pi / 4}, "0.9003163161571061"},
		{"平方根(面积/π)", S境{"面积": 166, "π": math.Pi}, "7.269074295019226"},
		//{"方根(面积/π)", S境{"面积": 166, "π": math.Pi}, "7.269074295019226"},
		{"sqrt(面积/π)", S境{"面积": 166, "π": math.Pi}, "7.269074295019226"},
	}

	var 前式 string
	for _, 测试 := range 测试集 {
		if 测试.式 != 前式 {
			fmt.Printf("\n%s\n", 测试.式)
			前式 = 测试.式
		}
		式, 障 := S析(测试.式)
		if 障 != nil {
			测.Error(障)
			continue
		}
		结果 := fmt.Sprintf("%g", 式.S算(测试.境))
		fmt.Printf("\t%v => %s\n", 测试.境, 结果)
		if 结果 != 测试.果 {
			测.Errorf("%v之%s.S算()=%q, 期望结果%q\n ", 测试.境, 测试.式, 结果, 测试.果)
		}
	}
}

func Test语法(测 *testing.T) {
	var 测试集 = []struct {
		待测式 string
		境   S境
		要   string // S析，S检和S式的结果
	}{
		{"x % 2", nil, "未知 '%'"},
		{"!true", nil, "未知 '!'"},
		{"log(10)", nil, `未知函名"log"`},
		{"sqrt(1, 2)", nil, "sqrt被供2参，但只要1个"},
		{"sqrt(A / pi)", S境{"A": 87616, "pi": math.Pi}, "167.00011673013586"},
		{"pow(x, 3) + pow(y, 3)", S境{"x": 9, "y": 10}, "1729"},
		{"5 / 9 * (F - 32)", S境{"F": -40}, "-40"},
	}

	for _, 测试 := range 测试集 {
		式, 障 := S析(测试.待测式)
		if 障 == nil {
			障 = 式.S检(map[S变量]bool{})
		}
		if 障 != nil {
			if 障.Error() != 测试.要 {
				测.Errorf("%s: 得 %q, 要 %q", 测试.待测式, 障, 测试.要)
			}
			continue
		}

		得 := fmt.Sprintf("%g", 式.S算(测试.境))
		if 得 != 测试.要 {
			测.Errorf("%s: %v => %s, 要 %s",
				测试.待测式, 测试.境, 得, 测试.要)
		}
	}
}
